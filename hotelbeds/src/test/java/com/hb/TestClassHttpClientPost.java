package com.hb;

public class TestClassHttpClientPost {

	public static void main(String[] args) {
		try {
			String resultData = "";//requestSender.getHotelsDataJson("", "FileLatest");
			System.out.println("DDDDDDD "+resultData);
		}catch(Exception e) {
			System.out.println(e.getStackTrace());
		}
		

	}

}
/*while (isHBThreadAlive && hbObject != null) 
{
   HotelBedsThread hbThreadObj = hbObject.getHbThread();
   if(hbThreadObj != null) 
   {
	   isHBThreadAlive = hbThreadObj.isAlive();
   }else 
   {
	   isHBThreadAlive = false;
   }
   if(isHBThreadAlive) 
   {
	   continue;
    
   }else 
   {
	    if(hbThreadObj != null) {
	    	try {
	    		responseDataString = FileProcessorUtil.parseHBDataFileAndGenerateXMLResponse(BontonProperties.FILE_WRITE_DIRECTORY+requestId+".txt");
	    	}catch(Exception e) {
	    		logger.error("Error while Parsing Flat File : "+requestId);
	    		responseDataString = "Exception Occuered";
	    		break;
	    	}
	    }
	    break;
   }
 }
}*/
/*public String checkHotelPricingAndGetResult(Map<String,String> requestDataMap) {
String result = "";
 
String json = "";

if(requestDataMap != null && !requestDataMap.isEmpty() ) {
	
	String rateKey = requestDataMap.get("rateKey");
	
	if(rateKey != null && !rateKey.trim().equals("")) {
		
		String signature = org.apache.commons.codec.digest.DigestUtils
                 .sha256Hex(HotelBedsProperties.API_KEY + HotelBedsProperties.SHARED_SECRET + System.currentTimeMillis() / 1000);
        
		try {
			URL url = new URL(HotelBedsProperties.HB_REPRICING_RATE_KEY_GET_URL+"?rateKey="+rateKey);
            
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            connection.setRequestMethod( "GET" );
            connection.setRequestProperty("X-Signature", signature);
            connection.setRequestProperty("User-Agent", "Mozilla/5.0");
            connection.setRequestProperty("Api-Key", HotelBedsProperties.API_KEY);
            connection.setRequestProperty("Accept", "application/json");
            connection.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
            connection.setDoOutput(true);
            connection.setDoInput(true);
            int responseCode = connection.getResponseCode();
            String responseMessage = connection.getResponseMessage();
            
            System.out.println("Response Code "+responseCode + "  ::: Response Message  "+responseMessage);
            
            StringBuilder sbr = new StringBuilder("");
            System.out.println("getting input stream ");
            InputStreamReader streamReader = new InputStreamReader(connection.getInputStream());
            BufferedReader bufferedReader = new BufferedReader(streamReader);
            String response = null;
            while ((response = bufferedReader.readLine()) != null) {
                sbr.append(response);
            }
            System.out.println("response fetched");
            bufferedReader.close();
            FileProcessorUtil.writeStringToFile(sbr.toString(), BontonProperties.FILE_WRITE_DIRECTORY+"CurrentDataForRateKey.txt");
		}catch(Exception e) {
			System.out.println("Exception in checking RateKey "+e.getStackTrace());
		}
	}
}


return result;
}*/

/*public String sendJsonRequestAndGetData(String requestJsonString, String requestId) {

StringBuilder stringBuilder = new StringBuilder();
String result = "";
String signature = org.apache.commons.codec.digest.DigestUtils
         .sha256Hex(HotelBedsProperties.API_KEY + HotelBedsProperties.SHARED_SECRET + System.currentTimeMillis() / 1000);
System.out.println("Signature  "+signature);
 //String json = "{\"hotels\":{\"hotel\":[1067,1070,1075,135813,145214,1506,1508,1526,1533,1539,1550,161032,170542,182125,187939,212167,215417,228671,229318,23476]},\"occupancies\":[{\"rooms\":1,\"children\":1,\"adults\":2,\"paxes\":[{\"type\":\"AD\",\"age\":30},{\"type\":\"AD\",\"age\":30},{\"type\":\"CH\",\"age\":2}]}],\"stay\":{\"checkIn\":\"2016-05-25\",\"checkOut\":\"2016-05-26\",\"shiftDays\":\"2\"}}";
String json = requestJsonString;

	try {
	
    // Signature is generated by SHA256 
   
    
    
    URL url = new URL(HotelBedsProperties.END_POINT);
    
    HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
    connection.setRequestMethod( "POST" );
    connection.setRequestProperty("X-Signature", signature);
    connection.setRequestProperty("User-Agent", "Mozilla/5.0");
    connection.setRequestProperty("Api-Key", HotelBedsProperties.API_KEY);
    connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.95 Safari/537.11");
    connection.setRequestProperty("Accept", "application/json");
    connection.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
    connection.setDoOutput(true);
    connection.setDoInput(true);
    System.out.println("getting output stream");
    OutputStreamWriter streamWriter = new OutputStreamWriter(connection.getOutputStream());
    streamWriter.write(json);
    streamWriter.flush();
    
    
    System.out.println("getting input stream ");
    InputStreamReader streamReader = new InputStreamReader(connection.getInputStream());
    BufferedReader bufferedReader = new BufferedReader(streamReader);
    String response = null;
//    StringBuilder sbr1 = new StringBuilder("");
    while ((response = bufferedReader.readLine()) != null) {
        stringBuilder.append(response);
      //  sbr1.append(response);
    }
    System.out.println("response fetched");
    bufferedReader.close();
//  FileProcessorUtil.writeStringToFile(sbr1.toString(), BontonProperties.FILE_WRITE_DIRECTORY+"CurrentData.txt");
    Gson g = new Gson();
    HBJsonDataContainer hbJaonDataCOntainer = g.fromJson(stringBuilder.toString(), HBJsonDataContainer.class);
    String fileNameWithPath = BontonProperties.FILE_WRITE_DIRECTORY+requestId+".txt";
    if(hbJaonDataCOntainer != null) {
    	if(hbJaonDataCOntainer.getAuditData() != null && hbJaonDataCOntainer.getHotels() != null) {
    		HBDataProcessorImpl hbDataProcessor = new HBDataProcessorImpl();
    		System.out.println("Calling method getHBDataINAggregationformat");
    		String dataString  = hbDataProcessor.getHBDataReponseInAggregationFormat(hbJaonDataCOntainer);
    		System.out.println("Writing to file");
    		FileProcessorUtil.writeStringToFile(dataString, fileNameWithPath);
    		System.out.println("file written");
    	//	result = FileProcessorUtil.parseHBDataFileAndGenerateXMLResponse(fileNameWithPath);
    	}
    }
} catch (Exception e) {
	e.printStackTrace();
}
return stringBuilder.toString();
}*/
